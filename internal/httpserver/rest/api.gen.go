// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package rest

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
)

const (
	Api_keyScopes = "api_key.Scopes"
)

// Defines values for Status.
const (
	Created Status = "created"
	Doing   Status = "doing"
	Done    Status = "done"
)

// Error defines model for error.
type Error struct {
	Error   *error  `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Reminder A unique reminder
type Reminder struct {
	Created     time.Time  `json:"created"`
	Description string     `json:"description"`
	Id          ReminderID `json:"id"`
	Status      Status     `json:"status"`
	Title       string     `json:"title"`
}

// ReminderID defines model for reminderID.
type ReminderID = uuid.UUID

// Reminders defines model for reminders.
type Reminders = []Reminder

// Status defines model for status.
type Status string

// ID defines model for reminderID.
type ID = ReminderID

// QueryStatus defines model for status.
type QueryStatus = Status

// AllReminders defines model for all-reminders.
type AllReminders = Reminders

// ErrorReponse defines model for error.
type ErrorReponse = Error

// SingleReminder A unique reminder
type SingleReminder = Reminder

// UpdateReminderParams defines parameters for UpdateReminder.
type UpdateReminderParams struct {
	QueryStatus *QueryStatus `form:"status,omitempty" json:"status,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all reminders
	// (GET /reminders)
	GetAllReminders(ctx echo.Context) error
	// Create new reminder
	// (POST /reminders)
	CreateReminder(ctx echo.Context) error
	// Delete reminder
	// (DELETE /reminders/{reminderID})
	DeleteReminder(ctx echo.Context, iD ID) error
	// Get single reminder
	// (GET /reminders/{reminderID})
	GetSingleReminder(ctx echo.Context, iD ID) error
	// Update reminder
	// (PATCH /reminders/{reminderID})
	UpdateReminder(ctx echo.Context, iD ID, params UpdateReminderParams) error
	// test
	// (GET /test)
	Test(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllReminders converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllReminders(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllReminders(ctx)
	return err
}

// CreateReminder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateReminder(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateReminder(ctx)
	return err
}

// DeleteReminder converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reminderID" -------------
	var iD ID

	err = runtime.BindStyledParameterWithLocation("simple", false, "reminderID", runtime.ParamLocationPath, ctx.Param("reminderID"), &iD)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reminderID: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteReminder(ctx, iD)
	return err
}

// GetSingleReminder converts echo context to params.
func (w *ServerInterfaceWrapper) GetSingleReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reminderID" -------------
	var iD ID

	err = runtime.BindStyledParameterWithLocation("simple", false, "reminderID", runtime.ParamLocationPath, ctx.Param("reminderID"), &iD)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reminderID: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSingleReminder(ctx, iD)
	return err
}

// UpdateReminder converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "reminderID" -------------
	var iD ID

	err = runtime.BindStyledParameterWithLocation("simple", false, "reminderID", runtime.ParamLocationPath, ctx.Param("reminderID"), &iD)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reminderID: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateReminderParams
	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.QueryStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateReminder(ctx, iD, params)
	return err
}

// Test converts echo context to params.
func (w *ServerInterfaceWrapper) Test(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Test(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/reminders", wrapper.GetAllReminders)
	router.POST(baseURL+"/reminders", wrapper.CreateReminder)
	router.DELETE(baseURL+"/reminders/:reminderID", wrapper.DeleteReminder)
	router.GET(baseURL+"/reminders/:reminderID", wrapper.GetSingleReminder)
	router.PATCH(baseURL+"/reminders/:reminderID", wrapper.UpdateReminder)
	router.GET(baseURL+"/test", wrapper.Test)

}
